# Step 1: retrieve data
input {
    http {
        host => "0.0.0.0"
        port => "8337"
        type => "build"
    }
    http {
        host => "0.0.0.0"
        port => "8007"
        type => "lava"
    }
}

# Step 2: apply filters and do some magic
filter {

    # Avoid parsing empty stuff
    if [message] =~ /^\s*$/ {
        drop { }
    }

    # Converts input into json
    json {
        source => "message"
    }

    # Remove logs from lava
    if [type] == "lava" {
        # If input is coming from http, parse GET params
        if [headers] != "" {
            kv {
                include_keys => ["lab_name"]
                field_split => "&?"
                source => "[headers][request_path]"
            }
        }

        # Parse YAML fields
        ruby {
            init => "require 'yaml'; require 'json';"
            code => "definition = YAML.load(event.get('definition'));
                     event.set('definition', definition.to_json);

                     # We've seen only 'lava' index for results, change here if
                     # new type of results are found
                     results = YAML.load(event.get('results')['lava'])
                     event.set('results', results);"
        }

        json {
            source => "definition"
        }

        json {
            source => "results"
            target => "results"
        }

        # Do not store logs for now, they're too big
        mutate {
            remove_field => ["log", "definition"]
        }
    }
 
    # Remove the generic type field (used only to determine the index type)
    mutate { add_field => { "[@metadata][index_type]" => "%{type}" } }
    mutate { remove_field => ["type", "headers", "message", "@version", "token"] }
}

# Step 3: submit it to ES
output {
    elasticsearch {
        hosts => ["127.0.0.1:9200"]
        index => "%{[@metadata][index_type]}-%{+YYYY.MM.dd}"
    }
    # Debugging purposes
    file {
        path => "/tmp/%{[@metadata][index_type]}-%{+YYYY.MM.dd}"
        write_behavior => "overwrite"
    }
}
